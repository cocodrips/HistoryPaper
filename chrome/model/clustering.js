// Generated by CoffeeScript 1.6.3
(function() {
  var CreateHistoryObject;

  this.Clustering = (function() {
    function Clustering(histories) {
      var clusterNum, i, _i;
      this.searchWords = [];
      this.histories = new CreateHistoryObject(histories);
      clusterNum = this.calcClusterNum();
      this.clusters = [];
      for (i = _i = 0; 0 <= clusterNum ? _i < clusterNum : _i > clusterNum; i = 0 <= clusterNum ? ++_i : --_i) {
        this.clusters[i] = [];
      }
    }

    Clustering.prototype.clusteringHistories = function() {
      var i, kmeans, obj, objs, _i, _len, _results;
      this.setWords2Histories();
      this.setKeys2Histories();
      kmeans = new Kmeans(this.histories, this.clusters.length);
      objs = kmeans.start();
      _results = [];
      for (i = _i = 0, _len = objs.length; _i < _len; i = ++_i) {
        obj = objs[i];
        _results.push(this.clusters[obj.clusterId].push(i));
      }
      return _results;
    };

    Clustering.prototype.getClusterHistories = function(clusterId) {
      var histories, i, _i, _ref;
      histories = [];
      for (i = _i = 0, _ref = this.clusters[clusterId].length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        histories[i] = this.histories[this.clusters[clusterId][i]];
      }
      return histories;
    };

    Clustering.prototype.setKeys2Histories = function() {
      var history, k, keywords, topKeywords, _i, _j, _len, _len1, _ref, _results;
      topKeywords = this.selectTopKeywords(100);
      _ref = this.histories;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        history = _ref[_i];
        keywords = {};
        for (_j = 0, _len1 = topKeywords.length; _j < _len1; _j++) {
          k = topKeywords[_j];
          if (_.contains(history.words, k)) {
            if (keywords[k]) {
              keywords[k]++;
            } else {
              keywords[k] = 1;
            }
          } else {
            keywords[k] = 0;
          }
        }
        _results.push(history.coordinate = keywords);
      }
      return _results;
    };

    Clustering.prototype.setWords2Histories = function() {
      var history, segmenter, _i, _len, _ref, _results;
      _ref = this.histories;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        history = _ref[_i];
        segmenter = new TinySegmenter();
        _results.push(history.words = segmenter.segment(history.title));
      }
      return _results;
    };

    Clustering.prototype.calcClusterNum = function() {
      return 9;
    };

    Clustering.prototype.registSearchWord = function(history) {
      var q, query, _i, _len, _results;
      q = history.url.match(/\?q=.*?\&/);
      if (!q) {
        return;
      }
      try {
        q = decodeURI(q[0]).replace(/\?q=(.*?)\&/, '$1');
        q = q.split(/[\s,\+]+/);
        _results = [];
        for (_i = 0, _len = q.length; _i < _len; _i++) {
          query = q[_i];
          if (this.searchWords[query]) {
            _results.push(this.searchWords[query]++);
          } else {
            _results.push(this.searchWords[query] = 1);
          }
        }
        return _results;
      } catch (_error) {}
    };

    Clustering.prototype.selectTopKeywords = function(n) {
      var data, history, i, keyword, keywords, topKeywords, word, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      data = [];
      _ref = this.histories;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        history = _ref[_i];
        _ref1 = history.words;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          word = _ref1[_j];
          word = $.trim(word);
          if (data[word]) {
            data[word]++;
          } else {
            data[word] = 1;
          }
        }
      }
      keywords = Utils.sortByValue(data, true);
      topKeywords = [];
      i = 0;
      for (_k = 0, _len2 = keywords.length; _k < _len2; _k++) {
        keyword = keywords[_k];
        if (!stopwords[keyword]) {
          topKeywords.push(keyword);
          if (++i >= n) {
            break;
          }
        }
      }
      return topKeywords;
    };

    Clustering.prototype.extractKeyword = function(history) {
      var keywords, word, _i, _len, _ref, _results;
      keywords = [];
      _ref = history.words;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        if (Utils.isKeyword(word)) {
          _results.push(keywords.push(word));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Clustering;

  })();

  CreateHistoryObject = (function() {
    function CreateHistoryObject(histories) {
      return this.createHistoryObject(histories);
    }

    CreateHistoryObject.prototype.createHistoryObject = function(histories) {
      var history, historyObjs, k, obj, urls, v, _i, _len;
      histories = this.exceptHistories(histories);
      console.log(histories);
      urls = [];
      historyObjs = [];
      for (_i = 0, _len = histories.length; _i < _len; _i++) {
        history = histories[_i];
        obj = new HistoryObject();
        for (k in history) {
          v = history[k];
          obj[k] = v;
        }
        historyObjs.push(obj);
      }
      return historyObjs;
    };

    CreateHistoryObject.prototype.exceptHistories = function(histories) {
      var h, history, _i, _len;
      h = [];
      for (_i = 0, _len = histories.length; _i < _len; _i++) {
        history = histories[_i];
        if (this.canSelect(history)) {
          h.push(history);
        }
      }
      return h;
    };

    CreateHistoryObject.prototype.canSelect = function(history) {
      var conditions, k, v;
      conditions = {
        isNotSearch: function(history) {
          if (history.url.indexOf("https://www.google.co.jp/search?") > -1) {
            return false;
          }
          return true;
        },
        isNotBinary: function(history) {
          var pageType, t, target, _i, _len;
          pageType = history.url.split("/").pop();
          target = ["png", "jpg", "mp3"];
          for (_i = 0, _len = target.length; _i < _len; _i++) {
            t = target[_i];
            if (pageType.indexOf(t) !== -1) {
              return false;
            }
          }
          return true;
        }
      };
      for (k in conditions) {
        v = conditions[k];
        if (!v(history)) {
          return false;
        }
      }
      return true;
    };

    return CreateHistoryObject;

  })();

}).call(this);
