// Generated by CoffeeScript 1.6.3
(function() {
  var ExtractContents, Node;

  window.onload = function() {
    var ex;
    ex = new ExtractContents();
    return ex.extractContents();
  };

  Node = (function() {
    function Node(score, content) {
      this.score = score;
      this.content = content;
      this.strlen = this.content.length;
    }

    return Node;

  })();

  ExtractContents = (function() {
    function ExtractContents() {}

    ExtractContents.prototype.extractContents = function() {
      var nodes;
      nodes = this.extractNodes();
      return console.log(this.selectContent(nodes));
    };

    ExtractContents.prototype.extractNodes = function() {
      var element, elements, i, node, nodes, target, targets, _i, _j, _len, _len1;
      targets = ["div"];
      nodes = [];
      i = 0;
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        elements = document.getElementsByTagName(target);
        for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
          element = elements[_j];
          node = new Node(this.scoreringNode(element), element.innerText);
          nodes[i] = node;
          i++;
        }
      }
      return nodes;
    };

    ExtractContents.prototype.scoreringNode = function(element) {
      return this.countPunctuation(element.innerText);
    };

    ExtractContents.prototype.countPunctuation = function(str) {
      var c, cnt, re, target, _i, _len;
      target = "。|、";
      re = new RegExp(target);
      cnt = 0;
      for (_i = 0, _len = str.length; _i < _len; _i++) {
        c = str[_i];
        if (c.match(re)) {
          cnt++;
        }
      }
      return cnt;
    };

    ExtractContents.prototype.selectContent = function(nodes) {
      var _this = this;
      nodes.sort(function(a, b) {
        var aScore, bScore;
        aScore = Math.sqrt(a.score) / a.strlen;
        bScore = Math.sqrt(b.score) / b.strlen;
        if (aScore < bScore) {
          return -1;
        }
        if (aScore > bScore) {
          return 1;
        }
        return 0;
      });
      console.log(nodes);
      return nodes[0];
    };

    return ExtractContents;

  })();

}).call(this);
