// Generated by CoffeeScript 1.6.3
(function() {
  var data, i, test_data, test_rect, _i;

  data = [];

  this.History = (function() {
    function History() {}

    History.prototype.changeDate = function(date, searchWord) {
      var end, histories, jsonData, start,
        _this = this;
      if (searchWord == null) {
        searchWord = "";
      }
      start = Date.parse(date) - 86400000;
      end = Date.parse(date);
      jsonData = "";
      histories = [];
      return chrome.history.search({
        "text": searchWord,
        "startTime": start,
        "endTime": end,
        "maxResults": 1000
      }, function(array) {
        var a, contents, layout, _i, _len;
        console.log(array.length);
        contents = null;
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          a = array[_i];
          chrome.storage.local.get(a['url'], function(items) {
            var b;
            return b = 1;
          });
        }
        layout = new Layout(data);
        return layout.drawArticles();
      });
    };

    return History;

  })();

  test_data = [["8.3. collctions — High-performance container datatypes", "https://docs.python.org/2/library/collections.html"], ["", "", ""], ["", "", ""], ["", "", ""], ["", "", ""], ["AngularJS — Superheroic JavaScript MVW Framework", "https://angularjs.org/"], ["Floyd–Warshall algorithm", "http://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm", "  \"Floyd's algorithm\" redirects here. For cycle detection, see Floyd's cycle-finding algorithm. For computer graphics, see Floyd–Steinberg dithering.\nFloyd–Warshall algorithm\nClass	All-pairs shortest path problem (for weighted graphs)\nData structure	Graph\n"], ["", "", ""], ["", "", ""], ["", "", ""]];

  test_rect = [[0, 0, 510, 464], [510, 0, 445, 421.052631579], [510, 421.052631579, 445, 368.421052632], [955, 0, 445, 421.052631579], [955, 421.052631579, 445, 368.421052632], [0, 464, 510, 178], [510, 789.473684211, 445, 210.526315789], [955, 789.473684211, 445, 210.526315789], [0, 642, 510, 178], [0, 820, 510, 178]];

  for (i = _i = 0; _i < 10; i = ++_i) {
    data[i] = new HistoryObject();
    data[i].rect = new Rect(test_rect[i][0], test_rect[i][1], test_rect[i][2], test_rect[i][3]);
    data[i].title = test_data[i][0];
    data[i].url = test_data[i][1];
    data[i].content = test_data[i][2];
  }

}).call(this);
